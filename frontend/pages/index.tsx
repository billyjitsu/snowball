import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import NAV from "../components/Nav";
import Hero from "../components/battle/Intro";
import Fight from "../components/battle/Fight";
import Loading from "../components/Loading"
import { checkWhichNFT, fetchNFT, getIsGameInProgress } from "../helpers";
import { useEffect, useState } from "react";
import { useAccount } from "wagmi";
import { useRouter } from "next/navigation";
import dynamic from "next/dynamic";
import {
  writeContract,
  waitForTransaction
} from "@wagmi/core";
import Snowfight from "../contract/contract.json";

const Home: NextPage = () => {
  const router = useRouter()
  const { address } = useAccount();
  const [hasNft, setHasNft] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(false);
  const [gameInProgress, setGameInProgress] = useState<boolean>(false)
  const [gameStarted, setGameStarted] = useState<boolean>(false); // @TODO change this based on game status

  const StartGame = async () => {
    try {
      setLoading(true)
      const { hash } = await writeContract({
        address: process.env.NEXT_PUBLIC_CONTRACT_ADDRESS as `0x${string}`,
        abi: Snowfight.abi,
        functionName: "startGame",
      });
      await waitForTransaction({
        hash,
      });

      setGameStarted(true)
      setLoading(false)
      router.push("/arena")
    } catch (error) {
      console.log(error);
    }
  };
  useEffect(() => {
    if (!address) return;
    setLoading(true)
    const fetchData: () => Promise<void> = async () => {
      const mintedData = await fetchNFT(address || undefined);
      setHasNft(!!mintedData);

      const isGameInProgress = await getIsGameInProgress()
      setGameInProgress(isGameInProgress)
      if (!loading && address && isGameInProgress) {
        router.push(`/arena`)
      }
      setLoading(false)
    };

    fetchData();
  }, [address]);

  return (
    <div className="min-h-screen font-serif">
      <Head>
        <title>SnowDay</title>
        <meta
          content="Generated by API3"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <div>
        {!address && (
          <p className="text-3xl text-center text-white">Connect Wallet to start</p>
        )
        }
        {!gameInProgress && <div className="flex justify-center">
          {!gameStarted && <button
            onClick={() => {
              StartGame();
            }}
            className={`relative bg-gray-500 hover:bg-gray-700 p-[5px] border border-white text-white text-3xl font-bold rounded my-4 overflow-hidden`}

          >{!loading ? "Start The Battle" : "...entering the battle"}</button>}
        </div>}
        {loading && (
          <div className="">
            <Loading action="...loading" size="lg" />
          </div>
        )}
      </div>

      {/* <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer> */}
    </div>
  );
};

export default dynamic(() => Promise.resolve(Home), { ssr: false });

